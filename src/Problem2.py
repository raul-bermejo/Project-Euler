# -*- coding: utf-8 -*-
"""
Created on Wed Jan  6 09:02:51 2021

@author: rbv

Problem 2:

Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
"""

import time

# Write a function to find any fibonacci number
def fib(n):
    """
    Finds any nth term in the fibonacci sequence recursively.
    
    Parameters:
    ----------
    n: int
       N-th number in the fibonacci sequence.
    
    Returns:
    -------
    a_n: int
         corresponding fibonacci term.
    """
    
    if n == 1:
        return 1
    
    elif n == 2:
        return 2
    
    elif n > 2:
        a_n = fib(n-1) + fib(n-2)
        return a_n
    
# Now append in a list the first 4million fibo numbers that are even and find sum
start = time.time()
lst = []
f, j = 1, 1
while f < 4*(10**6):
    f = fib(j)
    if f%2 == 0:
        lst.append(f)
    else:
        pass
    j += 1
s = sum(lst)   
end = time.time()

print(f"The sum of  all the required Fibonacci even terms up to 1 million is: {s}")
print(f"The program took {end-start:.2e} seconds.")
    